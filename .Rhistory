knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
setwd("~/Desktop/Broad/alicia/HGDP_TGP")
ds_tmp <- read.table("HGDP+TGP_gnomAD_subset_metadata.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE, fill = TRUE)
# set the sample column as the row names
ds <- ds_tmp[,-1]
rownames(ds) <- ds_tmp[,1]
#dim(ds) # 4150 by 184
#summary(ds)
t_freq <- ds %>% count(hgdp_tgp_meta.Population)
# edit the column names
colnames(t_freq) <- c("population", "num_of_samples")
# first, group the dataset by population and then within each population, add up the number of samples that had a value of "TRUE" for each filter column
t_filter <- ds %>% group_by(hgdp_tgp_meta.Population)  %>% summarise_at(129:156, ~sum(.==TRUE, na.rm = TRUE))
#~sum(.==TRUE, na.rm = TRUE) is the same as funs(sum(.==TRUE, na.rm = TRUE))
#ds %>% group_by(hgdp_tgp_meta.Population)  %>% summarise(p = sum(sample_filters.fail_n_transversion_residual == TRUE, na.rm = TRUE)) # does what the above code does but only for one filter column - for each population, add up the number of samples that failed the "sample_filters.fail_n_transversion_residual" filter
# sanity check
#table(ds %>% group_by(hgdp_tgp_meta.Population)  %>% summarise(p = sum(sample_filters.sex_aneuploidy == TRUE, na.rm = TRUE)) %>% select(p) == ds %>% group_by(hgdp_tgp_meta.Population)  %>% summarise_at(129:156, ~sum(.==TRUE, na.rm = TRUE)) %>% select(sample_filters.sex_aneuploidy))
# merge the two dataframes
t_final <- merge(t_freq, t_filter, by.x = "population", by.y = "hgdp_tgp_meta.Population")
# add a column to indicate the 5 populations that were filtered out by the gnomAD QC
filtered_out <- c("BiakaPygmy", "MbutiPygmy", "Melanesian", "Papuan", "San")
t_final$failed_gnomAD <- t_final$population %in% filtered_out
setwd("~/Desktop/Broad/alicia/HGDP_TGP")
getwd
write.csv(t_final, file = "failed_filters_population_level.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
setwd("~/Desktop/Broad/alicia/HGDP_TGP")
ds_tmp <- read.table("HGDP+TGP_gnomAD_subset_metadata.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE, fill = TRUE)
# set the sample column as the row names
ds <- ds_tmp[,-1]
rownames(ds) <- ds_tmp[,1]
all(ds$bergstrom.region) == toupper(ds$hgdp_tgp_meta.Study.region)
ds$bergstrom.region
ds$hgdp_tgp_meta.Study.region
toupper(ds$hgdp_tgp_meta.Study.region)
head(ds$bergstrom.region)
head(toupper(ds$hgdp_tgp_meta.Study.region))
all((ds$bergstrom.region) == toupper(ds$hgdp_tgp_meta.Study.region))
ds$project_meta.project_subpop == tolower(ds$hgdp_tgp_meta.Population)
all(ds$project_meta.project_subpop == tolower(ds$hgdp_tgp_meta.Population))
ds[all((ds$bergstrom.region) == toupper(ds$hgdp_tgp_meta.Study.region))]
ds[((ds$bergstrom.region) == toupper(ds$hgdp_tgp_meta.Study.region))]
(ds$bergstrom.region) == toupper(ds$hgdp_tgp_meta.Study.region)
all((ds$hgdp_tgp_meta.Genetic.region) == toupper(ds$project_meta.project_subpop))
(ds$hgdp_tgp_meta.Genetic.region) == toupper(ds$project_meta.project_subpop)
(ds$hgdp_tgp_meta.Genetic.region) == toupper(ds$project_meta.project_pop)
setwd("~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(plotly)
setwd("~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp")
hgdp_tgp <- read.delim('~/Desktop/Broad/alicia/pca_subcont/gnomad_meta_v1.tsv', header=T, sep='\t') %>%
dplyr::select(s, project_meta.title, starts_with('hgdp_tgp_meta'))
load_pop_make_pca_plot <- function(pop_name) {
# import pc files
ref_unrel <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_', pop_name, '_scores.txt.bgz')), header=T)
proj_rel <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_', pop_name, '_projected_scores.txt.bgz')), header=T)
# combine the ref and proj data into one dataset and then join that to the metadata to add additional info for those samples
pca_subcont <- bind_rows(ref_unrel, proj_rel) %>%
left_join(hgdp_tgp)
nb.cols <- length(unique(pca_subcont$hgdp_tgp_meta.Population)) # number of subcontinental regions within each region/continent
mycolors <- colorRampPalette(brewer.pal(7, "Set1"))(nb.cols) # set color palettes
# plot pca
p_subcont <- ggplot(pca_subcont, aes(x=PC1, y=PC2, color=hgdp_tgp_meta.Population, shape=project_meta.title, text=s)) +
geom_point() +
theme_classic() +
labs(shape='Project') +
scale_color_manual(values=mycolors, name='Population') +
labs(title=paste(pop_name, "PCA (after removing outlier)"))
ggsave(paste0('pca_plots_outliers_removed/subcont_pca_', pop_name, '.pdf'), p_subcont) # save plot to pdf
ggplotly(p_subcont, tooltip='text') # make plot interactive
}
ref <- read.table(gzfile('~/Desktop/Broad/alicia/pca_subcont/scores.txt.bgz'), header=T)
proj <- read.table(gzfile('~/Desktop/Broad/alicia/pca_subcont/projected_scores.txt.bgz'), header=T)
# combine the ref and proj data into one dataset and then join that to the metadata to add additional info for those samples
pca <- bind_rows(ref, proj) %>%
left_join(hgdp_tgp)
# plot pca
p <- ggplot(pca, aes(x=PC1, y=PC2, color=hgdp_tgp_meta.Genetic.region, shape=project_meta.title, text=s)) +
geom_point() +
theme_classic() +
labs(title="Global PCA")
ggsave('pca_plots/global_pca.pdf', p) # save plot as pdf
ggplotly(p, tooltip='text') # make plot interactive
View(pca)
View(hgdp_tgp)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(plotly)
setwd("~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp")
hgdp_tgp <- read.delim('~/Desktop/Broad/alicia/pca_subcont/gnomad_meta_v1.tsv', header=T, sep='\t') %>%
dplyr::select(s, project_meta.title, starts_with('hgdp_tgp_meta'))
load_pop_make_pca_plot <- function(pop_name) {
# import pc files
ref_unrel <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_', pop_name, '_scores.txt.bgz')), header=T)
proj_rel <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_', pop_name, '_projected_scores.txt.bgz')), header=T)
# combine the ref and proj data into one dataset and then join that to the metadata to add additional info for those samples
pca_subcont <- bind_rows(ref_unrel, proj_rel) %>%
left_join(hgdp_tgp)
nb.cols <- length(unique(pca_subcont$hgdp_tgp_meta.Population)) # number of subcontinental regions within each region/continent
mycolors <- colorRampPalette(brewer.pal(7, "Set1"))(nb.cols) # set color palettes
# plot pca
p_subcont <- ggplot(pca_subcont, aes(x=PC1, y=PC2, color=hgdp_tgp_meta.Population, shape=project_meta.title, text=s)) +
geom_point() +
theme_classic() +
labs(shape='Project') +
scale_color_manual(values=mycolors, name='Population') +
labs(title=paste(pop_name, "PCA (after removing outlier)"))
ggsave(paste0('pca_plots_outliers_removed/subcont_pca_', pop_name, '.pdf'), p_subcont) # save plot to pdf
ggplotly(p_subcont, tooltip='text') # make plot interactive
}
# AFR PCA
load_pop_make_pca_plot('AFR')
# AMR PCA
load_pop_make_pca_plot('AMR')
# CSA PCA
load_pop_make_pca_plot('CSA')
# EAS PCA
load_pop_make_pca_plot('EAS')
# EUR PCA
load_pop_make_pca_plot('EUR')
# MID PCA
load_pop_make_pca_plot('MID')
# OCE PCA
load_pop_make_pca_plot('OCE')
afr <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_AFR_scores.txt.bgz')), header=T)
afr_proj <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_AFR_projected_scores.txt.bgz')), header=T)
View(afr)
View(afr_proj)
afr <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_AFR_scores.txt.bgz')), header=T)
afr_proj <- read.table(gzfile(paste0('scores_for_pca_outliers_removed/subcont_pca_AFR_projected_scores.txt.bgz')), header=T)
pca_subcont_afr <- bind_rows(afr, afr_proj) %>%
left_join(hgdp_tgp)
View(pca_subcont_afr)
